from functools import reduce
from sys import argv
from itertools import cycle, count

''' 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы
сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) +
премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.'''

# us_work, us_kof, us_prem = argv
# print({us_work * us_kof + us_prem})


''' 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых 
больше предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].'''

# us_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# print([us_list[n] for n in range(1, len(us_list)) if us_list[n] > us_list[n - 1]])


''' 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание 
в одну строку. Подсказка: использовать функцию range() и генератор.'''

# print([i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0])


''' 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать 
итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования 
в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]'''

# us_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# print([us_list[n] for n in range(len(us_list)) if us_list.count(us_list[n]) == 1])


''' 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список 
должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления 
произведения всех элементов списка.
Подсказка: использовать функцию reduce().'''

# print(reduce(lambda x, y: x * y, range(100, 1001, 2))) # Можно легче

# result = [n for n in range(100, 1001) if n % 2 == 0] # По заданию
# print(reduce(lambda x, y: x * y, result))


''' 6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что 
создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем 
цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка 
будет прекращено.'''
# a = []
#
#
# def task_a(us_numb):
#     for i in count(us_numb):
#         if len(a) >= 7:
#             break
#         else:
#             a.append(i)
#     print(a)
#
#
# task_a(6)
#
#
# def task_b():
#     b = []
#     for i in cycle(a):
#         if len(b) >= len(a) * 3:
#             break
#         else:
#             b.append(i)
#     print(b)
#
#
# task_b()

''' 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим 
образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо 
выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.'''

# def fact(n):
#     a = 1
#     if n == 0:
#         print('0! = 1') # решил учесть и ноль, хотя в условии "начиная с 1! и до ..."
#     else:
#         for i in range(1, n+1):
#             a *= i
#             yield a
#
# b = 1
# for el in fact(2):
#     print(f'{b}! = {el}')
#     b += 1