'''1. Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
Об окончании ввода данных свидетельствует пустая строка.'''
# a = input('Введите данные: ')
# with open('task-1.txt', 'a+') as f:
#     while a:
#         f.write(f'{a}\n')
#         a = input('Введите данные: ')
import json

'''2. Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества 
строк, количества слов в каждой строке.'''
# line_count = 0
# with open('task-2.txt', 'r') as f:
#     for i in f.readlines():
#         line_count += 1
#         word_count = len(i.split())
#         print(f'В {line_count} строке {word_count} слова')
# print(f'Всего {line_count} строк')


'''3. Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов. 
Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников. Выполнить подсчет 
средней величины дохода сотрудников.'''
# summ = 0
# line_count = 0
# with open('task-3.txt', 'r', encoding = 'utf-8') as f:
#     for i in f.readlines():
#         word = i.split()
#         summ += int(word[1])
#         line_count += 1
#         if int(word[1]) < 20000:
#             print(f'У {word[0]} зарплата меньше 20000')
#
# print(f'Средняя величина дохода {summ/line_count} рублей')


'''4. Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные. При этом английские 
числительные должны заменяться на русские. Новый блок строк должен записываться в новый текстовый файл.'''
# rus_dict = {'One': 'Один', 'Two': 'Два', 'Three': 'Три', 'Four': 'Четыре'}
# with open('task-4.txt', 'r', encoding = 'utf-8') as f, open('task-4ru.txt', 'w') as f_ru:
#     for i in f.readlines():
#         word = i.rstrip().split(' - ')
#         print(word)
#         if word[0] in rus_dict:
#             f_ru.write(f'{rus_dict[word[0]]} - {word[1]}\n')


'''5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами. 
Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.'''
# with open('task-5.txt', 'w') as f:
#     f.write('5 10 14 7 48 21 6 99')
# summ = 0
# with open('task-5.txt', 'r') as f:
#     word = f.readline().split()
#     for i in word:
#         summ += int(i)
# print(f'сумма чисел равна {summ}')

'''6. Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие 
лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого 
предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее количество 
занятий по нему. Вывести словарь на экран.
Примеры строк файла:
Информатика: 100(л) 50(пр) 20(лаб).
Физика: 30(л) — 10(лаб)
Физкультура: — 30(пр) —

Пример словаря:
{“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}'''
# my_dict = {}
# with open('task-6.txt', 'r', encoding = 'utf-8') as f:
#     for i in f.readlines():
#         less_t, *less = i.split()
#         less_count = [int(les.rstrip('(л)(пр)(лаб)')) for les in less if les != '—']
#         my_dict.update({less_t: sum(less_count)})
#
# print(my_dict)

'''7. Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме: 
название, форма собственности, выручка, издержки.
Пример строки файла: firm_1 ООО 10000 5000.
Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если 
фирма получила убытки, в расчет средней прибыли ее не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со 
средней прибылью. Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
Итоговый список сохранить в виде json-объекта в соответствующий файл.
Пример json-объекта:
[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]

Подсказка: использовать менеджеры контекста.'''
# result = []
# dict_1 = {}
# dict_2 = {}
# average = []
# with open('task-7.txt', 'r', encoding='utf-8') as f:
#     for i in f.readlines():
#         name, _, revenue, costs = i.rstrip().split()
#         profit = int(revenue) - int(costs)
#         if profit > 0:
#             average.append(profit)
#             dict_1.update({name: profit})
#         else:
#             dict_2.update({name: profit})
#     result.append(dict_1)
#     result.append(dict_2)
#     result.append({'average': sum(average)/len(average)})
# print(result)
# with open('task-7j.json', 'w') as f:
#     json.dump(result, f)

